// Package visorconfig defines variables and constants for different operating systems
package visorconfig

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/bitfield/script"
	"github.com/skycoin/dmsg/pkg/dmsg"

	"github.com/skycoin/skywire/pkg/skyenv"
	"github.com/skycoin/skywire/pkg/skywire-utilities/pkg/buildinfo"
	"github.com/skycoin/skywire/pkg/skywire-utilities/pkg/cipher"
)

var (
	//OS detection at runtime
	OS = skyenv.OS
	// SkywirePath is the path to the installation folder for the linux packages.
	SkywirePath = skyenv.SkywirePath
	// ConfigJSON is the config name generated by the skywire-autocofig script in the linux packages
	ConfigJSON = skyenv.ConfigJSON

	// config file constants

	// ConfigName is the default config name. Updated by setting config file path.
	ConfigName = skyenv.ConfigName
	// DMSGHTTPName is the default dmsghttp config name
	DMSGHTTPName = skyenv.DMSGHTTPName
	// SERVICESName is the default services config name - should be the same contents as conf.skywire.skycoin.com or hardcoded fallback in skywire-utilities/pkg/skyenv
	SERVICESName = skyenv.SERVICESName

	// Dmsg port constants.
	// TODO(evanlinjin): Define these properly. These are currently random.

	// DmsgCtrlPort Listening port for dmsgctrl protocol (similar to TCP Echo Protocol).
	DmsgCtrlPort = skyenv.DmsgCtrlPort

	// DmsgSetupPort Listening port of a setup node.
	DmsgSetupPort = skyenv.DmsgSetupPort

	// DmsgHypervisorPort Listening port of a hypervisor for incoming RPC visor connections over dmsg.
	DmsgHypervisorPort = skyenv.DmsgHypervisorPort

	// DmsgTransportSetupPort Listening port for transport setup RPC over dmsg.
	DmsgTransportSetupPort = skyenv.DmsgTransportSetupPort

	// DmsgHTTPPort Listening port for dmsghttp logserver.
	DmsgHTTPPort = dmsg.DefaultDmsgHTTPPort

	// DmsgAwaitSetupPort Listening port of a visor for setup operations.
	DmsgAwaitSetupPort = skyenv.DmsgAwaitSetupPort

	// Transport port constants.

	// TransportPort Listening port of a visor for incoming transports.
	TransportPort = skyenv.TransportPort

	// PublicAutoconnect ...
	PublicAutoconnect = skyenv.PublicAutoconnect

	// Dmsgpty constants.

	// DmsgPtyPort ...
	DmsgPtyPort = skyenv.DmsgPtyPort

	// DmsgPtyCLINet ...
	DmsgPtyCLINet = skyenv.DmsgPtyCLINet

	// Skywire-TCP constants.

	// STCPAddr ...
	STCPAddr = skyenv.STCPAddr

	// Default skywire app constants.

	// SkychatName ...
	SkychatName = skyenv.SkychatName

	// SkychatPort ...
	SkychatPort = skyenv.SkychatPort

	// SkychatAddr ...
	SkychatAddr = skyenv.SkychatAddr

	// PingTestName ...
	PingTestName = skyenv.PingTestName

	// PingTestPort ...
	PingTestPort = skyenv.PingTestPort

	// SkysocksName ...
	SkysocksName = skyenv.SkysocksName

	// SkysocksPort ...
	SkysocksPort = skyenv.SkysocksPort

	// SkysocksClientName ...
	SkysocksClientName = skyenv.SkysocksClientName

	// SkysocksClientPort ...
	SkysocksClientPort = skyenv.SkysocksClientPort

	// SkysocksClientAddr ...
	SkysocksClientAddr = skyenv.SkysocksClientAddr

	// VPNServerName ...
	VPNServerName = skyenv.VPNServerName

	// VPNServerPort ...
	VPNServerPort = skyenv.VPNServerPort

	// VPNClientName ...
	VPNClientName = skyenv.VPNClientName

	// TODO(darkrengarius): this one's not needed for the app to run but lack of it causes errors

	// VPNClientPort ...
	VPNClientPort = skyenv.VPNClientPort

	// ExampleServerName ...
	ExampleServerName = skyenv.ExampleServerName

	// ExampleServerPort ...
	ExampleServerPort = skyenv.ExampleServerPort

	// ExampleClientName ...
	ExampleClientName = skyenv.ExampleClientName

	// ExampleClientPort ...
	ExampleClientPort = skyenv.ExampleClientPort

	// SkyForwardingServerName ...
	SkyForwardingServerName = skyenv.SkyForwardingServerName

	// SkyForwardingServerPort ...
	SkyForwardingServerPort = skyenv.SkyForwardingServerPort

	// SkyPingName ...
	SkyPingName = skyenv.SkyPingName

	// SkyPingPort ...
	SkyPingPort = skyenv.SkyPingPort

	// RPC constants.

	// RPCAddr ...
	RPCAddr = skyenv.RPCAddr

	// RPCTimeout ...
	RPCTimeout = skyenv.RPCTimeout

	// TransportRPCTimeout ...
	TransportRPCTimeout = skyenv.TransportRPCTimeout

	// UpdateRPCTimeout ...
	UpdateRPCTimeout = skyenv.UpdateRPCTimeout

	// Default skywire app server and discovery constants

	// AppSrvAddr ...
	AppSrvAddr = skyenv.AppSrvAddr

	// ServiceDiscUpdateInterval ...
	ServiceDiscUpdateInterval = skyenv.ServiceDiscUpdateInterval

	// AppBinPath ...
	AppBinPath = skyenv.AppBinPath

	// LogLevel ...
	LogLevel = skyenv.LogLevel

	// Routing constants

	// TpLogStore ...
	TpLogStore = skyenv.TpLogStore

	// Custom ...
	Custom = skyenv.Custom

	// Local constants

	// LocalPath ...
	LocalPath = skyenv.LocalPath

	// Default hypervisor constants

	// HypervisorDB ...
	HypervisorDB = skyenv.HypervisorDB

	// EnableAuth ...
	EnableAuth = skyenv.EnableAuth

	// PackageEnableAuth ...
	PackageEnableAuth = skyenv.PackageEnableAuth

	// EnableTLS ...
	EnableTLS = skyenv.EnableTLS

	// TLSKey ...
	TLSKey = skyenv.TLSKey

	// TLSCert ...
	TLSCert = skyenv.TLSCert

	// IPCShutdownMessageType sends IPC shutdown message type
	IPCShutdownMessageType = skyenv.IPCShutdownMessageType

	// IsPublic advertises the visor in the service discovery
	IsPublic = skyenv.IsPublic

	// NodeInfo is the name of the survey file
	NodeInfo = skyenv.NodeInfo

	// RewardFile is the name of the file containing skycoin reward address
	RewardFile = skyenv.RewardFile
)

// SkywireConfig returns the full path to the package config
func SkywireConfig() string {
	return SkywirePath + "/" + ConfigJSON
}

// PkgConfig struct contains paths specific to the linux packages
type PkgConfig struct {
	LauncherBinPath string `json:"launcher"`
	LocalPath       string `json:"local_path"`
	Hypervisor      `json:"hypervisor"`
	//		TLSCertFile string `json:"tls_cert_file"`
	//		TLSKeyFile  string `json:"tls_key_file"`
}

// LauncherBinPath struct contains the BinPath specific to the installation
type LauncherBinPath struct {
	BinPath string `json:"bin_path"`
}

// Hypervisor struct contains Hypervisor paths specific to the linux packages
type Hypervisor struct {
	DbPath     string `json:"db_path"`
	EnableAuth bool   `json:"enable_auth"`
}

// DmsgPtyWhiteList gets dmsgpty whitelist path for installed Skywire.
func DmsgPtyWhiteList() string {
	return filepath.Join(SkywirePath, "dmsgpty", "whitelist.json")
}

// MustPK unmarshals string PK to cipher.PubKey. It panics if unmarshaling fails.
func MustPK(pk string) cipher.PubKey {
	var sPK cipher.PubKey
	if err := sPK.UnmarshalText([]byte(pk)); err != nil {
		fmt.Printf("invalid public key: %s", pk)
		panic(err)
	}

	return sPK
}

// MustPKs unmarshals comma separated list of string PKs to []cipher.PubKey. It panics if unmarshaling fails.
func MustPKs(pks string) []cipher.PubKey {
	var sPKs cipher.PubKeys
	if err := sPKs.Set(pks); err != nil {
		fmt.Printf("invalid public key or keys: %s", pks)
		panic(err)
	}
	return []cipher.PubKey(sPKs)
}

// Version gets the version of the installation for the config
func Version() string {
	u := buildinfo.Version()
	v := u
	if u == "unknown" {
		//check for .git folder for versioning
		if _, err := os.Stat(".git"); err == nil {
			//attempt to version from git sources
			if _, err = exec.LookPath("git"); err == nil {
				if v, err = script.Exec(`git describe`).String(); err == nil {
					v = strings.ReplaceAll(v, "\n", "")
					v = strings.Split(v, "-")[0]
				}
			}
		}
	}
	return v
}

// HomePath gets the current user's home folder
func HomePath() string {
	dir, _ := os.UserHomeDir() //nolint
	return dir
}

// Config returns either UserConfig or PackageConfig based on permissions
func Config() skyenv.PkgConfig {
	if IsRoot() {
		return skyenv.PackageConfig()
	}
	return UserConfig()
}

var (
	// VisorConfigFile will contain the path to the visor's config or `stdin` to denote that the config was read from STDIN
	VisorConfigFile string
)

// PackageConfig returns the package-specific config paths
func PackageConfig() skyenv.PkgConfig {
	return skyenv.PackageConfig()
}

// UpdateCommand returns the commands which are run when the update button is clicked in the ui
func UpdateCommand() []string {
	return []string{`echo "not implemented"`}
}
